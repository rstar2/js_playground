service: my-youtube-download

custom:
  # define the name of the DynamoDB Table here as it's ARN will be used in the IAM roles also
  s3Bucket: ${self:service}-${self:provider.stage}

provider:
  name: aws
  runtime: nodejs8.10
  # timeout: 10 # global timeout - optional, in seconds, default is 6

  stage: ${opt:stage, 'dev'}
  region: eu-central-1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "TranscodedBucket" } ] ]  }

    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "TranscodedBucket" }, '/*' ] ]  }
    
  environment:
    # service: ${self:service}
    # stage: ${self:provider.stage}
    
    # TODO: get somehow from the Function's and Bucket's ARN
    functionTranscode: ${self:service}-${self:provider.stage}-transcode
    s3Bucket: ${self:service}-${self:provider.stage}

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  transcode:
    handler: aws/lambda-transcode.handler
    timeout: 300 # use all the AWS Maximum execution duration per request limit

    # If no trigger-events are specified that means that the function will be able to be called only from the AWS SKD
    # events:
    #   - http:
    #       path: transcode
    #       method: GET

  app-express:
    handler: aws/lambda-express.handler
    timeout: 300
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

resources:
  Resources:
    TranscodedBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
