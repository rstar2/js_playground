/* eslint-env browser */

if (('serviceWorker' in navigator) && ('PushManager' in window)) {
    pushRegister();
} else {
    // Service Worker isn't supported on this browser, disable or hide UI.
}

/**
 * @returns {Promise}
 */
function pushRegister() {
    // Handler for messages coming from the service worker
    navigator.serviceWorker.addEventListener('message', (event) => {
        console.log(`Received from service worker message: ${event.data.message}`);
    });
    
    // Register a Service Worker
    return navigator.serviceWorker.register('/push-worker.js', { scope: '/' })
        .then((registration) => {
            // Use the PushManager to get the user’s subscription to the push service
            return registration.pushManager.getSubscription()
                .then(async (subscription) => {
                    // If a subscription was found, return it
                    if (subscription) {
                        return subscription;
                    }

                    // Get the server’s public key
                    const response = await fetch('/push/vapidPublicKey');
                    const vapidPublicKey = await response.text();

                    // Chrome doesn’t accept the base64-encoded (string) vapidPublicKey yet
                    // use urlBase64ToUint8Array() is defined in /tools.js
                    const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);

                    // Otherwise, subscribe the user (userVisibleOnly allows to specify that we don’t plan to send notifications
                    // that don’t have a visible effect for the user)
                    return registration.pushManager.subscribe({
                        userVisibleOnly: true,
                        applicationServerKey: convertedVapidKey
                    });
                });
        })
        .then(async (subscription) => {
            // Send the subscription details to the server using the Fetch API
            await fetch('/push/subscribe', {
                method: 'post',
                headers: {
                    'Content-type': 'application/json'
                },
                body: JSON.stringify({
                    subscription: subscription
                }),
            });

            return subscription;
        })
        .then((subscription) => {
            // Ask the server to send the client a notification (for testing purposes,
            // in actual applications the push notification is likely going to be generated by some event in the server).
            document.getElementById('pushNotificationSend').onclick = () => {
                const payload = document.getElementById('pushNotificationPayload').value;

                fetch('/push/send', {
                    method: 'post',
                    headers: {
                        'Content-type': 'application/json'
                    },
                    body: JSON.stringify({
                        endpoint: subscription.endpoint,
                        payload: payload,
                    }),
                });

                // Send the message to the service worker
                navigator.serviceWorker.controller.postMessage("Wait for a PUSH notification");
            };
        })
        .catch(() => {
            document.getElementById('pushNotificationSend').remove();
            document.getElementById('pushNotificationPayload').remove;
        });
}

// Boilerplate borrowed from https://www.npmjs.com/package/web-push#using-vapid-key-for-applicationserverkey
function urlBase64ToUint8Array(base64String) {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding)
        .replace(/\-/g, '+')
        .replace(/_/g, '/');

    const rawData = window.atob(base64);
    const outputArray = new Uint8Array(rawData.length);

    for (let i = 0; i < rawData.length; ++i) {
        outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
}